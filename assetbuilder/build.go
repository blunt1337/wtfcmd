package main

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// escape string for go.
func escape(str string) string {
	str = strings.Replace(str, "\\", "\\\\", -1)
	str = strings.Replace(str, "\"", "\\\"", -1)
	str = strings.Replace(str, "\n", "\\n", -1)
	str = strings.Replace(str, "\r", "\\r", -1)
	str = strings.Replace(str, "\t", "\\t", -1)
	return str
}

// main will generate the export.go file.
// Usage: go run build.go <absolute_directory>
func main() {
	// Parameters
	if len(os.Args) != 2 {
		panic("Usage: go run build.go <absolute_directory>")
	}

	root := os.Args[1]
	if stat, err := os.Stat(root); err != nil || !stat.IsDir() {
		panic("Directory not found.")
	}

	// Build the start of the export.go file
	res := "package assets\n\n"
	res += "// Get returns the asset content by name.\n"
	res += "// This file is generated by build.php.\n"
	res += "func Get(asset string) string {\n"
	res += "\tswitch asset {\n"

	// List files
	rootLg := len(root) + 1
	filepath.Walk(root, func(path string, f os.FileInfo, err error) error {
		// Ignore dirs
		if f.IsDir() {
			return nil
		}

		// Relative filename
		rel := path[rootLg:]

		// Ignore build.go, export.go and files starting with a dot
		if rel == "export.go" || rel[0] == '.' {
			return nil
		}

		// Read the file
		content, err := ioutil.ReadFile(path)
		if err != nil {
			return err
		}

		// Result
		res += "\tcase \"" + escape(rel) + "\":\n"
		res += "\t\treturn \"" + escape(string(content)) + "\"\n"

		return nil
	})

	// Build the end of the export.go file
	res += "\t}\n"
	res += "\treturn \"\"\n"
	res += "}"

	// Save it
	ioutil.WriteFile(root+"/export.go", []byte(res), 0644)
}
