(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{43:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},(function(){return this.$createElement,this._self._c,this._m(0)}),[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",[a("h1",{attrs:{id:"commands-template-usage"}},[t._v("Commands template usage")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Commands are in "),a("a",{attrs:{href:"https://golang.org/pkg/text/template/"}},[t._v("golang template")]),t._v(" code. Here are some simple examples to get you started:")]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Print an argument")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v("echo {{ .varname }}")])])]),t._v(" "),a("tr",[a("td",[t._v("Print a string argument escaped")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v("echo {{ esc .varname }}")])])]),t._v(" "),a("tr",[a("td",[t._v("Remove spaces between template code")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('"{{ 23 -}} < {{- 45 }}"')]),t._v(" = 23<45")])]),t._v(" "),a("tr",[a("td",[t._v("Condition with a boolean argument")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ if .varname }}echo "TRUE"{{end}}')])])]),t._v(" "),a("tr",[a("td",[t._v("Condition with a string argument")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ if eq .varname "yes" }}echo "TRUE"{{ end }}')])])]),t._v(" "),a("tr",[a("td",[t._v("Multiple conditions")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ if and (eq .varname1 "yes") (eq .varname2 "no")}}echo "TRUE"{{ end }}')])])]),t._v(" "),a("tr",[a("td",[t._v("Loops")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v("{{ range $index, $element := .array_variable }}{{ $element }}{{ else }}Empty array{{ end }}")])])]),t._v(" "),a("tr",[a("td",[t._v("Use functions")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ replace "foobar" "foo" "bar" -1 }}')]),t._v(" = barbar")])]),t._v(" "),a("tr",[a("td",[t._v("Use utilities functions")]),t._v(" "),a("td",[a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ info "My name is" .name }}')])])])])]),t._v(" "),a("p",[t._v("All functions available are listed bellow.")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"string-functions"}},[t._v("String functions")]),t._v(" "),a("p",[t._v("All "),a("a",{attrs:{href:"https://golang.org/pkg/strings/"}},[t._v("golang strings")]),t._v(" function are available (but with a lower case first character):")]),t._v(" "),a("ul",[a("li",[t._v("compare, contains, containsAny, containsRune, count, equalFold, fields, fieldsFunc, hasPrefix, hasSuffix, index, indexAny, indexByte, indexFunc, indexRune, join, lastIndex, lastIndexAny, lastIndexByte, lastIndexFunc, map, repeat, replace, split, splitAfter, splitAfterN, splitN, title, toLower, toLowerSpecial, toTitle, toTitleSpecial, toUpper, toUpperSpecial, trim, trimFunc, trimLeft, trimLeftFunc, trimPrefix, trimRight, trimRightFunc, trimSpace, trimSuffix,")])]),t._v(" "),a("h2",{attrs:{id:"extra-string-related-functions"}},[t._v("Extra string related functions")]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("escape (param *) *")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Escape the argument to pass it as argument for bash or powershell. If the argument is a string, else it will return it as it is.")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("esc (param *) *")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Alias of escape.")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("unescape (param *) *")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Unescape an argument from bash or powershell. If the argument is a string, else it will return it as it is.")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("raw (param *) *")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Alias of unescape.")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("json (object *, pretty bool = false) string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Convert first argument to JSON. Return false on error.")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("jsonParse (json string) object")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Convert the json string argument to golang interface{}. Return false on error.")])])])]),t._v(" "),a("h1",{attrs:{id:"utilities-functions"}},[t._v("Utilities functions")]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("configdir () string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return the directory of the configuration file of the command running.")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("error (args… *) string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will print any arguments on stderr prefixed by a red [x].")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("panic (args… *) string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will print any arguments on stderr prefixed by a red [x]. Then exit with status 1.")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("warn (args… *) string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will print any arguments on stderr prefixed by an orange [-].")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("info (args… *) string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will print any arguments on stdout prefixed by a blue [>].")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("made (args… *) string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will print any arguments on stdout prefixed by a green [+].")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("ask (args… *) string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will print any arguments on stdout prefixed by a purple [?], then it will print the answer."),a("br"),t._v("For example: "),a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ ask "How old are you?" }}; echo "you are $({{ read }}) years old"')]),a("br"),t._v("or for secure questions: "),a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ ask "Password?" }}; echo "your new password: $({{ readSecure }})"')]),t._v(".")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("read () string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will read from stdin, for bash and powershell."),a("br"),t._v("For example: "),a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ ask "How old are you?" }}; echo "you are $({{ read }}) years old"')]),t._v(".")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("readSecure () string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will read a hidden text from stdin, for bash and powershell."),a("br"),t._v("For example: "),a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ ask "Password?" }}; echo "your new password: $({{ readSecure }})"')]),t._v(".")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("askYN (args… *) string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will print any arguments on stdout prefixed by a purple [?]. Then wait for a yes/no response."),a("br"),t._v("For example: "),a("code",{pre:!0,attrs:{class:"hljs inline"}},[t._v('{{ askYN "Install some stuff" }}) && echo "installing..." || echo "installation skiped"')]),t._v(".")])])])]),t._v(" "),a("table",{staticClass:"table table-striped"},[a("thead",[a("tr",[a("th",[t._v("bell () string")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Return a command that will print the ASCII bell character.")])])])])])}],!1,null,null,null);e.default=s.exports}}]);