package assets

// Get returns the asset content by name.
// This file is generated by build.php.
func Get(asset string) string {
	switch asset {
	case "autocomplete.ps1":
		return "# $ExecutionContext.InvokeCommand.ExpandString(CMDNAME --autocomplete setup)\n\n# Autocomplete function\n$completion_CMDNAME = {\n    param($commandName, $commandAst, $cursorPosition)\n\t\n    # Params for CMDNAME --autocomplete\n\t$cmdline = $commandAst.ToString()\n    $words = @()\n    foreach ($word in $commandAst.CommandElements) {\n        $words += $word.ToString()\n    }\n    \n    # Results\n\t$output = CMDNAME --autocomplete $cursorPosition \"$cmdline\" $words | Out-String\n    $output = $output -replace \"\\r\"\n    $output = $output -split \"SEPARATOR\"\n    foreach ($word in $output) {\n        if ($word -ne '') {\n            New-Object System.Management.Automation.CompletionResult $word, $word, 'ParameterValue', $word\n        }\n    }\n}\n\n# Register the TabExpension2 function\nif (-not $global:options) { $global:options = @{CustomArgumentCompleters = @{};NativeArgumentCompleters = @{}}}\n$global:options['NativeArgumentCompleters']['CMDNAME'] = $completion_CMDNAME\n$function:tabexpansion2 = $function:tabexpansion2 -replace 'End\\r\\n{','End { if ($null -ne $options) { $options += $global:options} else {$options = $global:options}'"
	case "autocomplete.sh":
		return "# Should be used with:\n# eval \"$(CMDNAME --autocomplete setup)\"\n\n# Call our program to autocomplete\n_CMDNAME_completion_loader() {\n\tlocal string=\"$(CMDPATH --autocomplete $COMP_POINT \"$COMP_LINE\" \"${COMP_WORDS[@]}\")\"\n\tlocal index=0\n\tlocal sep=\"SEPARATOR\"\n\t\n\t# Empty\n\tif [ -z \"$string\" ]; then\n\t\tCOMPREPLY=()\n        return 0\n\tfi\n\t\n\t# Split into COMPREPLY\n\twhile [ \"$string\" != \"${string#*$sep}\" ]; do\n\t\tCOMPREPLY[$index]=\"${string%%$sep*}\"\n\t\tindex=$index+1\n\t\tstring=\"${string#*$sep}\"\n\tdone\n\tCOMPREPLY[$index]=\"$string\"\n}\ncomplete -F _CMDNAME_completion_loader -o default CMDNAME"
	}
	return ""
}