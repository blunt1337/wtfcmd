(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{39:function(e,a,r){"use strict";r.r(a);var t=r(0),n=Object(t.a)({},(function(){return this.$createElement,this._self._c,this._m(0)}),[function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("div",[r("h1",[e._v("Command's definition")]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("Configuration files are stored in "),r("code",{pre:!0},[e._v(".wtfcmd.json")]),e._v(", "),r("code",{pre:!0},[e._v(".wtfcmd.yaml")]),e._v(" or "),r("code",{pre:!0},[e._v(".wtfcmd.yml")]),e._v(" files. They are loaded from each directory and parent directories from the current working dir.")]),e._v(" "),r("p",[e._v("For example, if you run "),r("code",{pre:!0},[e._v("wtf")]),e._v(" in "),r("code",{pre:!0},[e._v("/Users/blunt/projects")]),e._v(", it will try to load from "),r("code",{pre:!0},[e._v("/Users/blunt/projects/.wtfcmd.ext")]),e._v(" and "),r("code",{pre:!0},[e._v("/Users/blunt/.wtfcmd.ext")]),e._v(", and "),r("code",{pre:!0},[e._v("/Users/.wtfcmd.ext")]),e._v(" and "),r("code",{pre:!0},[e._v("/.wtfcmd.ext")]),e._v(".")]),e._v(" "),r("p",[e._v("A configuration can override a command from a parent configuration if they share the same group and name.")]),e._v(" "),r("p",[e._v("To test your commands, you can put as first argument "),r("code",{pre:!0},[e._v("--debug")]),e._v(" to print the command before running it."),r("br"),e._v("\nFor example "),r("code",{pre:!0},[e._v("wtf --debug commandname arg1 arg2")]),e._v(".")]),e._v(" "),r("hr"),e._v(" "),r("h1",[e._v("File structure")]),e._v(" "),r("p",[e._v("The .wtfcmd file must contain an array of "),r("a",{attrs:{href:"#commands"}},[e._v("command")]),e._v(" objects defined like bellow.")]),e._v(" "),r("h2",[e._v("Commands")]),e._v(" "),r("p",[e._v("A command is an object with the following properties.")]),e._v(" "),r("h4",[e._v("group")]),e._v(" "),r("p",[e._v("group's name "),r("em",[e._v("(optional)")])]),e._v(" "),r("p",[e._v("To run the command it will be "),r("code",{pre:!0},[e._v("wtf groupname name")]),e._v(". Without a group's name it is just "),r("code",{pre:!0},[e._v("wtf name")]),e._v('.\nGroup names can be either a string, or an array ["fullname", "alias"].\nOnly utf8 alphanumeric characters and '),r("code",{pre:!0},[e._v(":._-")]),e._v(" are allowed.")]),e._v(" "),r("h4",[e._v("name")]),e._v(" "),r("p",[e._v("command's name "),r("em",[e._v("(required)")])]),e._v(" "),r("p",[e._v("To run the command it will be "),r("code",{pre:!0},[e._v("wtf name")]),e._v(", or "),r("code",{pre:!0},[e._v("wtf groupname name")]),e._v(' if a group is mentioned.\nCommand names can be either a string, or an array ["fullname", "a"], where \'a\' is a one character alias.\nOnly utf8 alphanumeric characters and '),r("code",{pre:!0},[e._v(":._-")]),e._v(" are allowed.")]),e._v(" "),r("h4",[e._v("desc")]),e._v(" "),r("p",[e._v("description or help message "),r("em",[e._v("(optional, but recommended)")])]),e._v(" "),r("p",[e._v("Description can be either a string, or an array for multiple lines.")]),e._v(" "),r("h4",[e._v("cmd")]),e._v(" "),r("p",[e._v("command template "),r("em",[e._v("(required)")])]),e._v(" "),r("p",[r("a",{attrs:{href:"/template"}},[e._v("More info for the template section here")]),e._v('.\nString arrays will be concatenated with "\\n".\nIf the command is compatible with bash/powershell, you can just write a string or string[] as a command,\nbut for specific terminals, you can write an object like:')]),e._v(" "),r("pre",{pre:!0},[r("code",{attrs:{"v-pre":"",class:"language-json"}},[e._v("{\n\t"),r("span",{attrs:{class:"hljs-attr"}},[e._v('"bash"')]),e._v(": [\n\t\t"),r("span",{attrs:{class:"hljs-string"}},[e._v('"echo this command will run in bash"')]),e._v(",\n\t\t"),r("span",{attrs:{class:"hljs-string"}},[e._v('"echo multilines works too"')]),e._v("\n\t],\n\t"),r("span",{attrs:{class:"hljs-attr"}},[e._v('"powershell"')]),e._v(": "),r("span",{attrs:{class:"hljs-string"}},[e._v('"echo this command will run with powershell.exe"')]),e._v("\n}\n")])]),e._v(" "),r("h4",[e._v("cwd")]),e._v(" "),r("p",[e._v("current working dir of the command "),r("em",[e._v("(optional)")])]),e._v(" "),r("p",[e._v('Like commands, you can put one for "bash" and one for "powershell".')]),e._v(" "),r("ul",[r("li",[r("p",[e._v("If it starts with a dot, it will run in the config's directory + cwd.\nFor example, in /my_projects/wtfcmd.json, there is cwd = ./public; then running "),r("code",{pre:!0},[e._v("wtf")]),e._v(" in /my_projects/awesome/, will put the current working dir to /my_projects/public")])]),e._v(" "),r("li",[r("p",[e._v("If it starts with '/' or 'x:', an absolute path.\nFor example, in /my_projects/wtfcmd.json, there is cwd = /public; then running "),r("code",{pre:!0},[e._v("wtf")]),e._v(" in /my_projects/awesome/, will put the current working dir to /public")])]),e._v(" "),r("li",[r("p",[e._v("If none of above, the directory where wtf was called + cwd.\nFor example, in /my_projects/wtfcmd.json, there is cwd = public; then running "),r("code",{pre:!0},[e._v("wtf")]),e._v(" in /my_projects/awesome/, will put the current working dir to /my_projects/awesome/public")])])]),e._v(" "),r("p",[e._v("The default is the current directory where "),r("code",{pre:!0},[e._v("wtf")]),e._v(" is executed.\nFor more complex cases, in the command you can use "),r("code",{pre:!0},[e._v("cd {{configdir}}")]),e._v(".")]),e._v(" "),r("h4",[e._v("args")]),e._v(" "),r("p",[e._v("arguments "),r("em",[e._v("(optional)")])]),e._v(" "),r("p",[e._v("Arguments must contain an array of "),r("a",{attrs:{href:"#argument"}},[e._v("argument")]),e._v(" objects defined like below.")]),e._v(" "),r("h4",[e._v("flags")]),e._v(" "),r("p",[e._v("flags "),r("em",[e._v("(optional)")])]),e._v(" "),r("p",[e._v("Flags must contain an array of "),r("a",{attrs:{href:"#flag"}},[e._v("flag")]),e._v(" objects defined like below.")]),e._v(" "),r("hr"),e._v(" "),r("h3",[e._v("Arguments")]),e._v(" "),r("p",[e._v("Arguments are filled from the command line when they don't start with "),r("code",{pre:!0},[e._v("-")]),e._v(".\nFor example, "),r("code",{pre:!0},[e._v("wtf cmdname arg1 arg2")]),e._v(".\nIf an argument starts with a "),r("code",{pre:!0},[e._v("-")]),e._v(", you can stop flags parsing with "),r("code",{pre:!0},[e._v("--")]),e._v(".\nFor example, "),r("code",{pre:!0},[e._v("wtf cmdname --flag -- -arg1")]),e._v(".")]),e._v(" "),r("h4",[e._v("name")]),e._v(" "),r("p",[e._v("argument name "),r("em",[e._v("(required)")])]),e._v(" "),r("p",[e._v("It should be unique of course, and contain only utf8 alphanumeric characters and "),r("code",{pre:!0},[e._v(":._-")]),e._v(".")]),e._v(" "),r("h4",[e._v("desc")]),e._v(" "),r("p",[e._v("description or help message "),r("em",[e._v("(optional, but recommended)")])]),e._v(" "),r("p",[e._v("Description can be either a string, or an array for multiple lines.")]),e._v(" "),r("h4",[e._v("required")]),e._v(" "),r("p",[e._v("required to run the command "),r("em",[e._v("(optional, default false)")])]),e._v(" "),r("p",[e._v("Set to true if the argument is required and should print an error if missing. Only first arguments can be required.")]),e._v(" "),r("h4",[e._v("default")]),e._v(" "),r("p",[e._v("default value if the argument is missing "),r("em",[e._v("(optional, default nil)")])]),e._v(" "),r("p",[e._v("The value if the argument is not required and not filled. Can be anything except an object.\nIf is_array is set and the default value is not an array, the default value will be inserted in an empty array.")]),e._v(" "),r("h4",[e._v("is_array")]),e._v(" "),r("p",[e._v("True if the value is an array "),r("em",[e._v("(optional, default false)")])]),e._v(" "),r("p",[e._v("Only the last argument can be an array.\nFor example "),r("code",{pre:!0},[e._v("wtf cmd a b c d")]),e._v(" can be 1 argument with "),r("code",{pre:!0},[e._v("[a, b, c, d]")]),e._v(".")]),e._v(" "),r("h4",[e._v("test")]),e._v(" "),r("p",[e._v("test the value before running the command "),r("em",[e._v("(optional)")])]),e._v(" "),r("p",[e._v("The value is a string, and it can be:")]),e._v(" "),r("ul",[r("li",[e._v("a regex like "),r("code",{pre:!0},[e._v("^[a-z0-9]+$")]),e._v(", for case insensitive: "),r("code",{pre:!0},[e._v("^(?i)[a-z0-9]+$")]),e._v(",")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$int")]),e._v(" to check for integers")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$uint")]),e._v(" to check for positive integers")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$bool")]),e._v(" to check for booleans (It accepts 1, t, TRUE, true, True, 0, f, F, FALSE, false, False)")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$float")]),e._v(' or "$number" to check for floating numbers')]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$file")]),e._v(" to check for an existing files")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$dir")]),e._v(" to check for an existing directory")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$dir/file")]),e._v(" to check for an existing file or directory")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$json")]),e._v(" to check and parse the argument as a json object")])]),e._v(" "),r("hr"),e._v(" "),r("h3",[e._v("Flags")]),e._v(" "),r("p",[e._v("Flags are filled from the command line when they start with "),r("code",{pre:!0},[e._v("-")]),e._v(".\nIf the flag starts with a double "),r("code",{pre:!0},[e._v("-")]),e._v(", it uses it's full name.\nIf the flag starts with a single "),r("code",{pre:!0},[e._v("-")]),e._v(", it uses it's short name.\nFor example, a flag named "),r("code",{pre:!0},[e._v('["super", "s"]')]),e._v(" can be filled with "),r("code",{pre:!0},[e._v("wtf cmdname --super value")]),e._v(" or "),r("code",{pre:!0},[e._v("wtf cmdname -s value")]),e._v(".")]),e._v(" "),r("h4",[e._v("name")]),e._v(" "),r("p",[e._v("flag name and alias "),r("em",[e._v("(required)")])]),e._v(" "),r("p",[e._v('Can be either a string, or an array ["fullname", "f"], where \'f\' is the alias. Only UTF8 alphanumeric characters and '),r("code",{pre:!0},[e._v(":._-")]),e._v(" are allowed.\nCan be used with "),r("code",{pre:!0},[e._v("--dir=value")]),e._v(", or "),r("code",{pre:!0},[e._v("--dir value")]),e._v(", or "),r("code",{pre:!0},[e._v("-d=value")]),e._v(", or "),r("code",{pre:!0},[e._v("-d value")]),e._v(" (if not a boolean for the last one).")]),e._v(" "),r("h4",[e._v("desc")]),e._v(" "),r("p",[e._v("description or help message "),r("em",[e._v("(optional, but recommanded)")])]),e._v(" "),r("p",[e._v("Description can be either a string, or an array for multiple lines.")]),e._v(" "),r("h4",[e._v("default")]),e._v(" "),r("p",[e._v("default value if the argument is missing "),r("em",[e._v("(optional, default nil)")])]),e._v(" "),r("p",[e._v("The default value if the flag not mentioned. Can be anything except an object.\nIf is_array is set and the default value is not an array, the default value will be inserted in an empty array.")]),e._v(" "),r("h4",[e._v("is_array")]),e._v(" "),r("p",[e._v("True if the value is an array "),r("em",[e._v("(optional, default false)")])]),e._v(" "),r("p",[e._v("Only the last argument can be an array.\nFor example "),r("code",{pre:!0},[e._v("wtf cmd --flag value 1 --flag value2")]),e._v(" make an array flag=[value1, value2].")]),e._v(" "),r("h4",[e._v("test")]),e._v(" "),r("p",[e._v("test the value before running the command "),r("em",[e._v("(optional)")])]),e._v(" "),r("p",[e._v("The value is a string, and it can be:")]),e._v(" "),r("ul",[r("li",[e._v("a regex like "),r("code",{pre:!0},[e._v("^[a-z0-9]+$")]),e._v(", for case insensitive: "),r("code",{pre:!0},[e._v("^(?i)[a-z0-9]+$")]),e._v(",")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$int")]),e._v(" to check for integers")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$uint")]),e._v(" to check for positive integers")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$bool")]),e._v(" to check for booleans (It accepts 1, t, TRUE, true, True, 0, f, F, FALSE, false, False)")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$float")]),e._v(' or "$number" to check for floating numbers')]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$file")]),e._v(" to check for an existing files")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$dir")]),e._v(" to check for an existing directory")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$dir/file")]),e._v(" to check for an existing file or directory")]),e._v(" "),r("li",[r("code",{pre:!0},[e._v("$json")]),e._v(" to check and parse the argument as a json object")])]),e._v(" "),r("p",[e._v("To suggest a feature, report a bug, or general discussion: "),r("a",{attrs:{href:"http://github.com/blunt1337/wtfcmd/issues/"}},[e._v("http://github.com/blunt1337/wtfcmd/issues/")])])])}],!1,null,null,null);a.default=n.exports}}]);